<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on dreamLinux博客</title>
    <link>https://hardy1970.github.io/post/</link>
    <description>Recent content in Posts on dreamLinux博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 12 Jan 2021 22:00:00 +0800</lastBuildDate><atom:link href="https://hardy1970.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>12 Kubernetes 监控方案--cAdvisor&#43;Heapster&#43;Heapster&#43;Grafana</title>
      <link>https://hardy1970.github.io/post/12-kubernates-monitor-logs/</link>
      <pubDate>Tue, 12 Jan 2021 22:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/12-kubernates-monitor-logs/</guid>
      <description>kubernetes监控指标 集群监控 节点资源利用率 节点数 运行Pods pod监控 Kubernetes指标 容器指标 应用程序 Kubernetes监控方案 监控方法 告警 特点 适用 zabbix Y 大量定制工作 大部分的互联网公司 open-falcon Y 功能模块分解比较细，显得更复杂 cAdvisor+Heapster+InfluxDB+Grafana Y 容器监控 cAdvisor/exporter+Prometheus+Grafana Y 扩展性好 容器、应用、主机全方面</description>
    </item>
    
    <item>
      <title>11 kubernetes应用包管理工具(Helm)</title>
      <link>https://hardy1970.github.io/post/11-kubernetes-helm/</link>
      <pubDate>Tue, 12 Jan 2021 21:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/11-kubernetes-helm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10 在k8s平台部署一个网站</title>
      <link>https://hardy1970.github.io/post/10-deploy-demo-on-k8s/</link>
      <pubDate>Sun, 10 Jan 2021 21:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/10-deploy-demo-on-k8s/</guid>
      <description>0. 容器化服务交付流程 容器交付流程 - 本地开发阶段 - 代码编写 - Dockerfile编写 - 容器化测试 - 持续集成、持续交付 - 代码编译 - 构建镜像 - 推送镜像 - 部署编排模板 - 部署应用 - 持续交付 - 规划部署 - 环境配置 - 扩缩容配置 - 运维 - 监控告警 - 日志收集 - 故障排查 - 持续优化 在k8s平台部署项目流程</description>
    </item>
    
    <item>
      <title>09 Kubernetes 集群升级与维护</title>
      <link>https://hardy1970.github.io/post/09-kubernetes-kubeadminUpgrage/</link>
      <pubDate>Sun, 10 Jan 2021 18:30:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/09-kubernetes-kubeadminUpgrage/</guid>
      <description>kubeadm对k8s集群进行版本升级 kubernetes每隔三个月发布一个小版本 升级基本流程 升级管理节点 &amp;ndash;&amp;gt; 升级其它管理节点 &amp;ndash;&amp;gt; 升级工作节点 注意事项： 升级前必须备份所有组件及数据，例如etcd 千万不要跨多个小版本进行升级，例如1.16升级到1.19，可能出现版本不兼容，版本落后太多</description>
    </item>
    
    <item>
      <title>08 Kubernetes ETCD数据备份与恢复</title>
      <link>https://hardy1970.github.io/post/08-kubernetes-etcd/</link>
      <pubDate>Sun, 10 Jan 2021 17:30:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/08-kubernetes-etcd/</guid>
      <description>Etcd数据备份与恢复 kubernetes 使用Etcd 数据库实时存储集群中的数据，安全起见，一定要备份 kubeadm部署方式 etcd默认本地持久化目录 /etc/kubernetes/manifests/etcd.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 name:etcd-certshostNetwork:truepriorityClassName:system-cluster-criticalvolumes:- hostPath:path:/etc/kubernetes/pki/etcdtype:DirectoryOrCreatename:etcd-certs- hostPath:path:/var/lib/etcdtype:DirectoryOrCreatename:etcd-datastatus:{} 备份 ETCDCTL_API=3代表etcdctl版本 1 2 3 4 5 6 ETCDCTL_API=3 etcdctl \snapshot save snap.db\--endpoints=https://127.0.0.1:2379\--cacert=/etc/kubernetes/pki/etcd/ca.crt\--cert=/etc/kubernetes/pki/etcd/server.crt\--key=/etc/kubernetes/pki/etcd/server.key 恢复 1 先暂停kube-apiserver</description>
    </item>
    
    <item>
      <title>07 Kubernetes 安全(RBAC、Authentication、Authorization、Adminssion Control)</title>
      <link>https://hardy1970.github.io/post/07-kubernetes-security/</link>
      <pubDate>Sun, 10 Jan 2021 15:30:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/07-kubernetes-security/</guid>
      <description>kubernetes 安全框架 k8s安全控制框架主要由下面3个阶段进行控制，每一个阶段都支持插件方式，通过API Server配置来启用插件。 客户端要想访问k8s集群API Server，一般需要证书、Token或者用户名+密码；如果Pod访问，需要ServiceAccount Authentication (鉴权) Authorization (授权) Adminssion Control (</description>
    </item>
    
    <item>
      <title>06 Kubernetes 存储(本地卷、网络卷、StatefulSet、PV、PVC、ConfigMap、Secret)</title>
      <link>https://hardy1970.github.io/post/06-kubernetes-storage/</link>
      <pubDate>Sun, 10 Jan 2021 13:30:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/06-kubernetes-storage/</guid>
      <description>为什么需要存储卷 启动时需要的初始化数据，例如配置文件 启动过程中产生的临时数据，该临时数据需要多个容器间共享 启动过程中产品的持久化数据，例如mysql的data kubernetes中的volume提供了在容器中挂载外部存储的能力 pod需要设置卷来源（spec.volume）和挂载点</description>
    </item>
    
    <item>
      <title>05 Kubernetes 网络(IPVS、Service、Ingress、IngressController )</title>
      <link>https://hardy1970.github.io/post/05-kubernetes-network/</link>
      <pubDate>Sat, 09 Jan 2021 13:30:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/05-kubernetes-network/</guid>
      <description>Service存在的意义 防止Pod失联（服务发现） 定义一组Pod的访问策略（负载均衡） Pod与Service的关系 通过label-selector相关联 通过service实现pod的负载均衡（TCP/UDP 4层） Service三种类型 ClusterIP(默认类型): 集群内部使用 NodePort:</description>
    </item>
    
    <item>
      <title>04 Kubernetes 资源调度(resources、nodeselector、nodeAffinity、Taints、Tolerations、nodeName、DaemonSet)</title>
      <link>https://hardy1970.github.io/post/04-kubernates-schedule/</link>
      <pubDate>Sat, 09 Jan 2021 13:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/04-kubernates-schedule/</guid>
      <description>创建一个pod的工作流程 kubernetes基于list-watch机制的控制器架构，实现组件间交互的解耦 [root@node01 ~]# kubectl run nginx --image=nginx 1 kubectl 将创建pod的请求提交到apiserver 2 会将请求的信息写到etcd 3 api-server通知scheduler有创建新的pod, 收到创建之后就会根据调度算</description>
    </item>
    
    <item>
      <title>03 Kubernetes 应用程序生命周期管理(Yaml、Pod、Service、Scale、Autoscale、HPA、Rollout)</title>
      <link>https://hardy1970.github.io/post/03-kubernetes-life-cycle/</link>
      <pubDate>Sat, 09 Jan 2021 11:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/03-kubernetes-life-cycle/</guid>
      <description>在kubernetes中部署应用流程 制作镜像（Dockerfile）&amp;mdash;- 使用控制器部署镜像（Deployment、StatefulSet、DaemonSet）&amp;mdash;- 对外暴露应用（Service、Ingress）&amp;mdash;- 日志、监控&amp;mdash;- 日常运</description>
    </item>
    
    <item>
      <title>02 Kubernetes 监控与日志(Metrics-server)</title>
      <link>https://hardy1970.github.io/post/02-kubernates-monitor-logs/</link>
      <pubDate>Sat, 09 Jan 2021 10:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/02-kubernates-monitor-logs/</guid>
      <description>二进制搭建后，看不到master节点，kubectl get nod只能列出当前节点，如果master节点没有安装kubelet，kubectl get node就看不到master节点。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54</description>
    </item>
    
    <item>
      <title>01 基于kubeadm进行Kubernetes集群搭建(v1.18.0)</title>
      <link>https://hardy1970.github.io/post/01-kubernates-install/</link>
      <pubDate>Fri, 08 Jan 2021 22:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/01-kubernates-install/</guid>
      <description>生产环境部署k8s的2种方式 实验环境 k8s master/node cpu 2c k8s master/node 内存 2G+ &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; 测试环境 k8s-master cpu 2核 k8s-master 内存 4G k8s-master 硬盘 20G 测试环境 k8s-node cpu 4核 k8s-node 内存 8G k8s-node 硬盘 20G &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; 生产环境 k8s-master cpu 8核 k8s-master 内存 16G k8s-master 硬盘 100G 生产环境 k8s-node cpu 16核 k8s-node 内存 64G k8s-node 硬盘 500G 0.kubeadm介绍 kubeadm是一个工具，提供kubeadm init和ku</description>
    </item>
    
    <item>
      <title>00 Kubernetes概念及常用命令(Kubectl、Flannel、Calico)</title>
      <link>https://hardy1970.github.io/post/00-kubernates-command/</link>
      <pubDate>Fri, 08 Jan 2021 21:00:00 +0800</pubDate>
      
      <guid>https://hardy1970.github.io/post/00-kubernates-command/</guid>
      <description>有了docker，为什么还用kubernates? 企业需求：为提高业务并发和高可用，会使用多台服务器 多容器跨主机提供服务 多容器分布节点部署 多容器怎么升级 高效管理这些容器 容器编排程序 kubernates # 谷歌开发 swarm # docker官方开发，官方目前不提供支持了 Mesos Marathon # 依靠marathon框架 kubern</description>
    </item>
    
    <item>
      <title>13 Kubernetes 报错 unexpected error getting claim reference: selfLink was empty, can&#39;t make reference</title>
      <link>https://hardy1970.github.io/post/13-kubernates-%E6%8E%92%E9%94%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hardy1970.github.io/post/13-kubernates-%E6%8E%92%E9%94%99/</guid>
      <description>Kubernetes v1.21.1 报&amp;quot;unexpected error getting claim reference: selfLink was empty, can&amp;rsquo;t make reference&amp;quot; 版本v1.21.1 ，尝试创建pvc，它们都处于“pending”状态 使用命令查看kubectl logs nfs-client-provisioner报: I1210 14:42:01.396466 1 leaderelection.go:194] successfully acquired lease default/fuseim.pri-ifs I1210 14:42:01.396534 1 controller.go:631] Starting provisioner controller fuseim.pri/ifs_nfs-client-provisioner-64b7476494-p4fcm_dcfca333-3af5-11eb-8248-5aed4ceb7af7! I1210 14:42:01.496922 1 controller.go:680] Started provisioner controller fuseim.pri/ifs_nfs-client-provisioner-64b7476494-p4fcm_dcfca333-3af5-11eb-8248-5aed4ceb7af7! I1210 14:42:01.497152 1 controller.go:987] provision &amp;quot;default/pvc1&amp;quot; class &amp;quot;managed-nfs-storage&amp;quot;: started I1210 14:42:01.497157 1 controller.go:987] provision &amp;quot;default/test-claim&amp;quot;</description>
    </item>
    
  </channel>
</rss>
